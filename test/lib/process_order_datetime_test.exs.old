defmodule Sconely.ProcessOrderDateTimeTest do
  use SconeHomeElixir.ConnCase, async: true
  #use Plug.Test
  #alias SconeHomeElixir.Router

  use Timex

  #mix test --trace

  #@opts Router.init([])

  import Sconely.ProcessOrderDateTime

  test "format entire date and time" do

  		order_datetime = Ecto.DateTime.utc

  		month_as_word = nil
  		day_as_word = nil
  		st_nd_rd_th = nil
  		pad_minute = nil
  		am_pm = nil

  		#order_datetime.month
  		month_as_word_task = Task.async(Sconely.ProcessOrderDateTime, :month_as_word, [order_datetime.month])
  		#IO.inspect(Task.await(task))

  		#order_datetime.day

  		#{:ok, date} = Ecto.Date.dump(pool_order.delivery_date)

  		order_datetime_as_date = Ecto.DateTime.to_date(order_datetime)
  		date = Ecto.Date.to_erl(order_datetime_as_date)
		{:ok, date_from_erl} = Date.from_erl(date)    
		#to date to erl - from erl into elixir date
		#or use timex ecto

		#IO.inspect(Date.day_of_week(date_from_erl))           


  		week_day_as_word_task = Task.async(Sconely.ProcessOrderDateTime, :week_day_as_word, [1])
  		#IO.inspect(Task.await(task))

  		st_nd_rd_th_task = Task.async(Sconely.ProcessOrderDateTime, :st_nd_rd_th, [order_datetime.day])
  		#IO.inspect(Task.await(task))

  		#pad_minute_task = Task.async(Sconely.ProcessOrderDateTime, :pad_minute, [11])
  		#IO.inspect(Task.await(task))

  		#task = Task.async(Sconely.ProcessOrderDateTime, :am_pm, [11])
  		#IO.inspect(Task.await(task))

 		#don't include this in this test
  		#timezone = Timezone.get("America/Los_Angeles", Timex.now)

	    #IO.inspect(order_datetime |> Ecto.DateTime.to_erl |> NaiveDateTime.from_erl! |> DateTime.from_naive!("Etc/UTC"))

	    #order_datetime_converted = Timezone.convert(order_datetime |> Ecto.DateTime.to_erl |> NaiveDateTime.from_erl! |> DateTime.from_naive!("Etc/UTC"), timezone)

	    #order_datetime_convert_timezone(order_datetime)

	    IO.inspect(Task.await(week_day_as_word_task) <> " " <> Task.await(month_as_word_task) <> " " <> Task.await(st_nd_rd_th_task) <> " " <> Integer.to_string(order_datetime.year))

  		#"Monday Dec 1st, 2017 8:00 am" Los Angeles

  end

  test "month as word" do

  	order_datetime = Ecto.DateTime.utc

  	task = Task.async(Sconely.ProcessOrderDateTime, :month_as_word, [order_datetime.month])
  	#IO.inspect(Task.await(task))

  	assert month_as_word(1) == "January"
  end


  test "st_nd_rd_th" do

  	order_datetime = Ecto.DateTime.utc

  	timezone = Timezone.get("America/Los_Angeles", Timex.now)

    #IO.inspect(order_datetime |> Ecto.DateTime.to_erl |> NaiveDateTime.from_erl! |> DateTime.from_naive!("Etc/UTC"))

    order_datetime_converted = Timezone.convert(order_datetime |> Ecto.DateTime.to_erl |> NaiveDateTime.from_erl! |> DateTime.from_naive!("Etc/UTC"), timezone)


  	task = Task.async(Sconely.ProcessOrderDateTime, :st_nd_rd_th, [order_datetime_converted.day])
  	#IO.inspect(Task.await(task))

  	#assert Task.await(task) == "1st"

  	assert st_nd_rd_th(1) == "1st"
  end

  test "pad minute" do
  	task = Task.async(Sconely.ProcessOrderDateTime, :pad_minute, [1])
  	#IO.inspect(Task.await(task))

  	#assert Task.await(task) == "1st"

  	assert pad_minute(1) == "01"
  end



  test "week day as word" do
  	task = Task.async(Sconely.ProcessOrderDateTime, :week_day_as_word, [1])
  	#IO.inspect(Task.await(task))

  	assert Task.await(task) == "Monday"

  	#assert day_as_word(1) == "Monday"
  end

  test "am_pm 11 am" do
  	task = Task.async(Sconely.ProcessOrderDateTime, :am_pm, [11])
  	#IO.inspect(Task.await(task))

  	assert Task.await(task) == "11 am"

  	#parent = self()
	#spawn fn -> send(parent, {:am_pm(11), self()}) end
	#receive do
	#   {:hello, pid} -> "Got hello from #{inspect pid}"
	#end

  	#assert am_pm(11) == "11 am"
  #  assert [2,4,6] = pmap([1,2,3], fn x -> x * 2 end)
  end


  #timezone
  #
  test "order datetime convert timezone" do
  	order_datetime = Ecto.DateTime.utc

  	timezone = Timezone.get("America/Los_Angeles", Timex.now)

    #IO.inspect(order_datetime |> Ecto.DateTime.to_erl |> NaiveDateTime.from_erl! |> DateTime.from_naive!("Etc/UTC"))

    order_datetime_converted = Timezone.convert(order_datetime |> Ecto.DateTime.to_erl |> NaiveDateTime.from_erl! |> DateTime.from_naive!("Etc/UTC"), timezone)


  	#assert order_datetime_convert_timezone(order_datetime) = order_datetime_converted
  end

end