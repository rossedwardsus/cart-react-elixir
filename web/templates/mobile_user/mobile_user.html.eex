<link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/bootstrap/latest/css/bootstrap.min.css">
<link rel="stylesheet" type="text/css" href="//code.jquery.com/ui/1.11.4/themes/smoothness/jquery-ui.css">
<script type='text/javascript' src='https://code.jquery.com/jquery-2.1.4.min.js'></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>

<script>

  var i = 0;

  $(document).ready(function(){

      //$('body').on('click','img',function(e){

          alert('it works' + e.target.id);
          //$("#cart_amount").html(10);

      //})

  })

</script>

<style type="text/css">
   .navbar-wrapper {
    position: absolute;
    top: 0;
    right: 0;
    width: 100% !important;
    left: 0;
    z-index: 20;
    }

    /* Flip around the padding for proper display in narrow viewports */
    .navbar-wrapper > .container {
        padding-right: 0;
        padding-left: 0;
        width: inherit;
    }

    .navbar-wrapper .navbar {
        width: 100% !important;
    }

    .navbar-inverse {
      width: 100% !important;
        background-color: rgba(0, 0, 0, 0.5) !important;
      border-radius: 0;
    }

    .navbar-inverse .nav > li > a {
        color: #FFFFFF;
    }

    .navbar-inverse .nav > li > a:hover {
        background: none;
    }

    .navbar-brand {
        padding-top: 5px;
        padding-left: .5;
        color: #FFFFFF;
    }

    .navbar-default {
    background-color: white;
    border-color: #E7E7E7;
    }

    .main-header-background {
        background-size: 100% 100%;
        background-repeat: no-repeat;
        background-position: center; 
        background-image: url('http://www.riwakawebsitedesigns.com/external/images/stars/img-stars-2.jpg');
      height: 620px;
      width: 100%;
      margin-bottom: 60px;
    }

    body {
    padding-right: 0 !important;
    padding-left: 100 !important;
    }

    html, body {
      width: auto;
      overflow-x: hidden;
    }

    .container {
      width: 100%;
      padding:0;
      margin:0;
      padding-right: -1000;
      padding-left: 30px;
      margin-right: 0;
      margin-left: 0;
    }
</style>




<nav class="navbar navbar-default navbar-fixed-top">
      <div class="container-fluid">
        <div class="navbar-header">
          <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
            <span class="sr-only">Toggle navigation</span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
            <span class="icon-bar"></span>
          </button>
          <a class="navbar-brand" href="#"><img src="/images/logo/sconely_logo_tiny.jpg"></a>
        </div>
        <div id="navbar" class="navbar-collapse collapse">
          <ul class="nav navbar-nav">
            <li class="active"><a href="#">Home</a></li>
            <li><a href="/about">About Us</a></li>
            <li><a href="/menu">Menu</a></li>
            <li><a href="/login">Logout</a></li>
            <li class="dropdown">
              <a href="#" class="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span class="caret"></span></a>
              <ul class="dropdown-menu">
                <li><a href="#">Delivery Address</a></li>
                <li><a href="#">Payment</a></li>
                <li><a href="#">Something else here</a></li>
                <li role="separator" class="divider"></li>
                <li class="dropdown-header">Nav header</li>
                <li><a href="#">Separated link</a></li>
                <li><a href="#">One more separated link</a></li>
              </ul>
            </li>
          </ul>
          <ul class="nav navbar-nav navbar-right">
            <li><a href="../navbar/">Password</a></li>
            <li><a href="../navbar-static-top/">Static top</a></li>
            <li class="active"><a href="./">Fixed top <span class="sr-only">(current)</span></a></li>
          </ul>
        </div><!--/.nav-collapse -->
      </div>
    </nav>



<br>
<br>

<div class="container-fluid">
    <div class="row">
        <div class="hidden-xs col-md-4">
        left hand menu on desktop
        <br>
        orders1
        <br>
        messages
        <br>
        create order
        <br>
        delivery address
        <br>
        payment
        <br>
        password
        <br>
        image
        <br>
        about me???
        <br>
        food preferences
        </div>
        <div class="col-xs-6 col-md-4">
            <div id="root"></div>
        </div>
    </div>
</div>

<script type="text/babel">

    /*//import React from 'react'
    //import { render } from 'react-dom'
    //import { Router, Route, Link, browserHistory } from 'react-router'

    var Router = ReactRouter;
    var Route = Router.Route; 
    var DefaultRoute = Router.DefaultRoute; 
    var Link=Router.Link;
    var RouteHandler = Router.RouteHandler;
    //var browserHistory = Router.browserHistory;*/

    /*class App extends React.Component {

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            menu: [{id: 1}, {id: 2}],
            cart_count: 0,
            page: "",
            user_id: "",
            address: "",
            payment: "",
            stripe_card_id: 1234,
            cart: {order_id: 12345, items: [{id: 1}, {id: 2}]},
            selected_items: []
          }

          alert();

          //this.addItem = this.addItem.bind(this);
          //this.btnNext = this.btnNext.bind(this);
          //this.btnCart = this.btnCart.bind(this);
          //this.selectedItem = this.selectedItem.bind(this);

        }

        componentDidMount(){

            alert();

        }

        render(){

            return(<div></div>);

        }
    
    }*/

    /*const App = React.createClass({

        componentDidMount: function(){

          alert();

        },

        render(){



        }

    })*/
    //const About = React.createClass({/*...*/})
    //const NoMatch = React.createClass({/*...*/})

    /*ReactDOM.render((
      <window.Router>
        <window.Route path="/" component={App}>
          
        </window.Route>
      </window.Router>
    ), document.getElementById('root'))*/

</script>


<script type="text/babel">

    //create the order
    //update guest list
    //change address
    //change datetime

     /*class EventName extends React.Component {
    //- - - - - - ^ - the magic happens here

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            cart: 0
          }

          this.addItem = this.addItem.bind(this);

        }
        addItem() {
          // this
          //alert();
          var cart = this.state.cart;
          this.setState({cart: cart + 1});
        }
        //componentDidMount() {
          //SomeEvent.subscribe(this.myFunction);
        //  alert();
        //},
        //componentWillUnmount() {
          //SomeEvent.unsubscribe(this.myFunction);
        //}

        render() {

          var cart = this.state.cart;

          return (
              <div>
              cart-add more items
              </div>
          )

        }
    }

    class DateTime extends React.Component {
    //- - - - - - ^ - the magic happens here

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            cart: 0
          }

          this.addItem = this.addItem.bind(this);

        }
        addItem() {
          // this
          //alert();
          var cart = this.state.cart;
          this.setState({cart: cart + 1});
        }
        //componentDidMount() {
          //SomeEvent.subscribe(this.myFunction);
        //  alert();
        //},
        //componentWillUnmount() {
          //SomeEvent.unsubscribe(this.myFunction);
        //}

        render() {

          var cart = this.state.cart;

          return (
              <div>
              <br/>
              if three days because the even don't allow this to be changed
              cart-add more items
              </div>
          )

        }
    }

    class GuestList extends React.Component {
    //- - - - - - ^ - the magic happens here

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            cart: 0
          }

          this.addItem = this.addItem.bind(this);

        }
        addItem() {
          // this
          //alert();
          var cart = this.state.cart;
          this.setState({cart: cart + 1});
        }
        //componentDidMount() {
          //SomeEvent.subscribe(this.myFunction);
        //  alert();
        //},
        //componentWillUnmount() {
          //SomeEvent.unsubscribe(this.myFunction);
        //}

        render() {

          var cart = this.state.cart;

          return (
              <div>
              cart-add more items
              </div>
          )

        }
    }

    class DeliveryAddress extends React.Component {
    //- - - - - - ^ - the magic happens here

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            cart: 0
          }

          this.addItem = this.addItem.bind(this);

        }
        addItem() {
          // this
          //alert();
          var cart = this.state.cart;
          this.setState({cart: cart + 1});
        }
        //componentDidMount() {
          //SomeEvent.subscribe(this.myFunction);
        //  alert();
        //},
        //componentWillUnmount() {
          //SomeEvent.unsubscribe(this.myFunction);
        //}

        render() {

          var cart = this.state.cart;

          return (
              <div>
              dont allow this to be changed if three days before event
              <br/>
              show previously saved address
              <br/>
              address naming?
              <br/>
              cart-add more items
              </div>
          )

        }
    }

    class Payment extends React.Component {
    //- - - - - - ^ - the magic happens here

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            cart: 0
          }

          this.addItem = this.addItem.bind(this);
          this.getToken = this.getToken.bind(this);

        }
        addItem() {
          // this
          //alert();
          var cart = this.state.cart;
          this.setState({cart: cart + 1});
        }
        //componentDidMount() {
          //SomeEvent.subscribe(this.myFunction);
        //  alert();
        //},
        //componentWillUnmount() {
          //SomeEvent.unsubscribe(this.myFunction);
        //}

        //handleSubmit(e) {
        //  e.preventDefault();
        //  Stripe.card.createToken(e.currentTarget, function (status, response) {
        //    console.log( status, response );      
        //  });
        //}

        getToken(){

            Stripe.setPublishableKey('pk_test_rB0UvhlpdgEt4RJkInrwWhzg');
            Stripe.createToken({
                  number: "4242424242424242",
                  cvc: "1234",
                  exp_month: "01",
                  exp_year: "2020"
            }, function(status, response){

                //alert(JSON.stringify(status))
                //alert(JSON.stringify(response))

                $.ajax({
                  type: 'POST',
                  url: '/api/v_alpha/user/sconely_yours/complete',
                  headers: {
                    stripeToken: response.id
                  },
                  data: {
                    token: response.id,
                    number: "ccNum",
                    cvc: "ccCVC",
                    exp_month: "ccMonth",
                    exp_year: "ccYear"
                  },
                  success: (response) => {
                    console.log('successful payment: ', response);
                  },
                  error: (response) => {
                    console.log('error payment: ', response);
                  }
                })

            });

        }

        render() {

          var cart = this.state.cart;

          return (
              <div>
                  <b>Use existing payment method</b>
                  <br/>
                  Add new method
                  <br/>
                  <form novalidate autocomplete="on" method="POST">
                    <div class="form-group">
                      <label for="cc-number" class="control-label">Card number formatting <small class="text-muted">[<span class="cc-brand"></span>]</small></label>
                      <input id="cc-number" type="tel" class="input-lg form-control cc-number" autocomplete="cc-number" placeholder="" value="4242424242424242" required/>
                    </div>

                    <div class="form-group">
                      <label for="cc-exp" class="control-label">Card expiry formatting</label>
                      <input id="cc-exp" type="tel" class="input-lg form-control cc-exp" autocomplete="cc-exp" placeholder="•• / ••" required/>
                    </div>

                    <div class="form-group">
                      <label for="cc-cvc" class="control-label">Card CVC formatting</label>
                      <input id="cc-cvc" type="tel" class="input-lg form-control cc-cvc" autocomplete="off" placeholder="•••" value="1234" required/>
                    </div>

                    <div class="form-group">
                      <label for="numeric" class="control-label">Restrict numeric</label>
                      <input id="numeric" type="tel" class="input-lg form-control" data-numeric/>
                    </div>
                    <button onClick={this.getToken}>Save</button>
                    <h2 class="validation"></h2>
                </form>
              </div>
          )

        }
    }


    class Message extends React.Component {
    //- - - - - - ^ - the magic happens here

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            cart: 0
          }

          this.addItem = this.addItem.bind(this);
          this.getToken = this.getToken.bind(this);

        }
        addItem() {
          // this
          //alert();
          var cart = this.state.cart;
          this.setState({cart: cart + 1});
        }
        //componentDidMount() {
          //SomeEvent.subscribe(this.myFunction);
        //  alert();
        //},
        //componentWillUnmount() {
          //SomeEvent.unsubscribe(this.myFunction);
        //}

        //handleSubmit(e) {
        //  e.preventDefault();
        //  Stripe.card.createToken(e.currentTarget, function (status, response) {
        //    console.log( status, response );      
        //  });
        //}

        getToken(){

            Stripe.setPublishableKey('pk_test_rB0UvhlpdgEt4RJkInrwWhzg');
            Stripe.createToken({
                  number: "4242424242424242",
                  cvc: "1234",
                  exp_month: "01",
                  exp_year: "2020"
            }, function(status, response){

                //alert(JSON.stringify(status))
                //alert(JSON.stringify(response))

                $.ajax({
                  type: 'POST',
                  url: '/api/v_alpha/user/sconely_yours/complete',
                  headers: {
                    stripeToken: response.id
                  },
                  data: {
                    token: response.id,
                    number: "ccNum",
                    cvc: "ccCVC",
                    exp_month: "ccMonth",
                    exp_year: "ccYear"
                  },
                  success: (response) => {
                    console.log('successful payment: ', response);
                  },
                  error: (response) => {
                    console.log('error payment: ', response);
                  }
                })

            });

        }

        render() {

          var cart = this.state.cart;

          return (
              <div>
                  <b>Use existing payment method</b>
                  <br/>
                  Add new method
                  <br/>
                  <form novalidate autocomplete="on" method="POST">
                    <div class="form-group">
                      <label for="cc-number" class="control-label">Card number formatting <small class="text-muted">[<span class="cc-brand"></span>]</small></label>
                      <input id="cc-number" type="tel" class="input-lg form-control cc-number" autocomplete="cc-number" placeholder="" value="4242424242424242" required/>
                    </div>

                    <div class="form-group">
                      <label for="cc-exp" class="control-label">Card expiry formatting</label>
                      <input id="cc-exp" type="tel" class="input-lg form-control cc-exp" autocomplete="cc-exp" placeholder="•• / ••" required/>
                    </div>

                    <div class="form-group">
                      <label for="cc-cvc" class="control-label">Card CVC formatting</label>
                      <input id="cc-cvc" type="tel" class="input-lg form-control cc-cvc" autocomplete="off" placeholder="•••" value="1234" required/>
                    </div>

                    <div class="form-group">
                      <label for="numeric" class="control-label">Restrict numeric</label>
                      <input id="numeric" type="tel" class="input-lg form-control" data-numeric/>
                    </div>
                    <button onClick={this.getToken}>Save</button>
                    <h2 class="validation"></h2>
                </form>
              </div>
          )

        }
    }


    
    class Order extends React.Component {
    //- - - - - - ^ - the magic happens here

        constructor(props) {
          super(props);
          // bind it and make it an instance method instead of prototype method
          //this.myFunction = this.myFunction.bind(this);
          //alert();
          this.state = {
            menu: [{id: 1}, {id: 2}],
            cart_count: 0,
            order_state: "",
            page: "",
            user_id: "",
            address: "",
            payment: "",
            stripe_card_id: 1234,
            cart: {order_id: 12345, items: [{id: 1}, {id: 2}]},
            selected_items: []
          }

          //this.addItem = this.addItem.bind(this);
          this.btnNext = this.btnNext.bind(this);
          this.btnCart = this.btnCart.bind(this);
          //this.selectedItem = this.selectedItem.bind(this);

        }
        componentDidMount(){

            //alert("order");

            //Stripe.setPublishableKey('pk_test_rB0UvhlpdgEt4RJkInrwWhzg');

        }
        addItem(id) {
          // this
          alert(id);

          //this.setState({selected_item: ""});

          var cart = this.state.cart;
          //this.setState({cart: cart + 1});
          var selected_items_temp = this.state.selected_items;
          selected_items_temp[id] = "";
          this.setState({selected_items: selected_items_temp});

        }

        selectedItem(e){

            //alert(JSON.stringify(e.target.id));
            var selected_items_temp = this.state.selected_items;
            selected_items_temp[id] = "";
            this.setState({selected_items: selected_items_temp});

        }

        btnNext(){

          if(this.state.order_state == ""){

              this.setState({page: "address"});

          }else if(this.state.order_state == "address"){

              //alert();

              this.setState({address: "delivery address1", pobox: "pobox", city: "city", state: "state", zipcode: "zipcode"});
              this.setState({page: "payment"});
          
          }else if(this.state.order_state == "payment"){

              /*$.ajax({
                url: "/api/v_alpha/user/sconely_yours/address",
                type: "POST",
                dataType: 'json',
                contentType: "application/json",
                cache: false,
                data: JSON.stringify({user_id: 1, cart: this.state.order, address: this.state.address, payment: this.state.payment}),
                success: function(data) {
                  
                  //this.setState({data: data});
                  //alert(JSON.stringify(data));
                  this.setState({page: "payment"});

                }.bind(this),
                error: function(xhr, status, err) {
                  //console.error(this.props.url, status, err.toString());
                }.bind(this)
              });*/

          }

        }

        btnCart(){

            this.setState({page: "cart"});

        }

        //componentDidMount() {
          //SomeEvent.subscribe(this.myFunction);
        //  alert();
        //},
        //componentWillUnmount() {
          //SomeEvent.unsubscribe(this.myFunction);
        //}

        startOrder(type){

            //alert(type);

            this.setState({order_type: type});

        }

        render() {

          var cart_count = this.state.cart_count;

          var page = "";

          //if order type == yours 
          //start with menu
          
          //else order type == social 
          //start with event name

          //if order_type == "yours" order_state == "menu"
          //if "social" set to "event_name"
          //maybe do order state as an array?

          /*if(this.state.order_state == "event_name"){


          }else if(this.state.order_state == "address"){

              //alert();

              page = <Address/>;

          }else if(this.state.order_state == "payment"){

              //alert();

              page = <Payment/>;

          }else if(this.state.order_state == "cart"){

              page = <Cart/>;

          }*/


          return (
              <div>
                <nav className="navbar navbar-default navbar-fixed-top">
                  <div className="container-fluid">
                    <div className="navbar-header">
                      <button type="button" className="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">
                        <span className="sr-only">Toggle navigation</span>
                        <span className="icon-bar"></span>
                        <span className="icon-bar"></span>
                        <span className="icon-bar"></span>
                      </button>
                      <a className="navbar-brand" href="#"><img src="/images/logo/sconely_logo_tiny.jpg"/></a>

                        <p className="navbar-text">cart(<span id="cart_item_count"><a onClick={this.btnCart}>{cart_count}</a></span>)</p>
                      
                    </div>
                    <div id="navbar" className="navbar-collapse collapse">
                      <ul className="nav navbar-nav">
                        <li className="active"><a href="#">Home</a></li>
                        <li><a href="/about">About Us</a></li>
                        <li><a href="/menu">Menu</a></li>
                        <li><a href="/login">Logout</a></li>
                        <li className="dropdown">
                          <a href="#" className="dropdown-toggle" data-toggle="dropdown" role="button" aria-haspopup="true" aria-expanded="false">Dropdown <span className="caret"></span></a>
                          <ul className="dropdown-menu">
                            <li><a href="#">Delivery Address</a></li>
                            <li><a href="#">Payment</a></li>
                            <li><a href="#">Something else here</a></li>
                            <li role="separator" className="divider"></li>
                            <li className="dropdown-header">Nav header</li>
                            <li><a href="#">Separated link</a></li>
                            <li><a href="#">One more separated link</a></li>
                          </ul>
                        </li>
                      </ul>

                      <ul className="nav navbar-nav navbar-right">
                        <li><a href="../navbar/">Password</a></li>
                        <li><a href="../navbar-static-top/">Static top</a></li>
                        <li className="active"><a href="./">Fixed top <span class="sr-only">(current)</span></a></li>
                      </ul>
                    </div>
                  </div>
                </nav>

                <div className="container-fluid">
                    <div className="row">
                        <div className="col-xs-12 col-md-3">
                                     
                          {this.state.menu.map(function(item){

                              //alert(this.state.selected_item);

                              //var selected_item = "selected_item" + item.id;
                              //this.setState({selected_item: ""});

                              //alert(this.setState["selected_item_" + item.id]);


                              return(<div>

                              </div>)

                          }.bind(this))}

                    </div>
                  </div>
                </div>

                <div className="container-fluid">
                  <div className="row">
                    <div className="col-xs-12 col-md-3">
                      <div className="thumbnail">
                        <img src="/images/strawberry_scones.png" alt="..."/>
                        <div className="caption">
                          <h3>Suzy Sunshine</h3>
                          <p><select onChange={this.selectedItem}>
                              <option value=""></option>
                              <option value="8">8</option>
                          </select></p>
                          <p><a id="btnItem" onClick={this.addItem} class="btn btn-default" role="button" value="1">Add To Cart</a></p>
                        </div>
                      </div>
                    </div>
                    <div className="col-xs-12 col-md-3">
                      <div className="thumbnail">
                        <img src="/images/strawberry_scones.png" alt="..."/>
                        <div className="caption">
                          <h3>Snorker</h3>
                          <p><select><option value="">12</option></select></p>
                          <p><a id="btnItem" class="btn btn-default" role="button" value="1">Add To Cart</a></p>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
                <a onClick={this.startOrder.bind(this, "yours")}>Yours</a>
                <br/>
                <a onClick={this.startOrder.bind(this, "social")}>Social</a>
                {page}
                <br/>
                <br/>
                <br/>
                <br/>
                <div id="next">
                    <nav className="navbar navbar-default navbar-fixed-bottom">
                          <div className="container-fluid">
                            <p><a onClick={this.btnNext} className="btn btn-default" role="button">Next</a></p>
                          </div>
                    </nav>
                </div>
              </div>
          );
        }
    };

    ReactDOM.render(
      <Order/>,
      document.getElementById('root1')
    );

    alert();*/

</script>



<script src="/js/flow/bundle_flow.js"></script>